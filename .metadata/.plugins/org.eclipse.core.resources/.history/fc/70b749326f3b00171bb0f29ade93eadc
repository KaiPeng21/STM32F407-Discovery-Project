/*
 * Demo 2 - Interrupt and Pushbutton
 *
 * GPIO (General Purpose Input Output)
 *
 * Toggle On-Chip Red LED  (Port D Pin 14) when On-Chip pushbutton is pressed (Port A Pin 0)
 * Oscillate On-Chip Green LED (Port D Pin 12)
 *
 */


#include "stm32f4xx.h"

// initialize setting functions
void init_LED_settings(void);
void init_PushButton_settings(void);
void init_EXTI_settings(void);
void init_NVIC_settings(void);

// misc functions
void Delay(uint32_t nCount);

int main(void)
{
	init_LED_settings();

	// Always turn on the On-Chip Red LED
	GPIO_WriteBit(GPIOD, GPIO_Pin_14, Bit_SET);

	while (1)
	{
		// Oscillating the On-Chip Green LED
		GPIO_WriteBit(GPIOD, GPIO_Pin_12, Bit_SET);
		Delay(5000000);
		GPIO_WriteBit(GPIOD, GPIO_Pin_12, Bit_RESET);
		Delay(5000000);
	}
}

void init_LED_settings(void)
{
	// Enable AHB1 Clock on Port D
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	// Port D Pin 12 - On-Chip Green LED
	// Port D¡@Pin 14 - On-Chip Red LED
	GPIO_InitTypeDef GPIO_Instruct;
	GPIO_Instruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_14;
	GPIO_Instruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_Instruct.GPIO_OType = GPIO_OType_PP;
	GPIO_Instruct.GPIO_Speed = GPIO_Speed_50MHz;

	// Save GPIO Setting to Port D Register
	GPIO_Init(GPIOD, &GPIO_Instruct);
}

void init_PushButton_settings(void)
{
	// Enable AHB1 Clock on Port A
	RC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	// Port A Pin 0 - On-Chip Pushbutton
	GPIO_InitTypeDef GPIO_Instruct;
	GPIO_Instruct.GPIO_Pin = GPIO_Pin_0;
	GPIO_Instruct.GPIO_Mode = GPIO_Mode_IN;
	GPIO_Instruct.GPIO_OType = GPIO_OType_PP;
	GPIO_Instruct.GPIO_Speed = GPIO_Speed_50MHz;

	// Save GPIO Setting to Port A Register
	GPIO_Init(GPIOA, &GPIO_Instruct);
}

void init_EXTI_settings(void)
{
	// Enable APB2 Clock for External Interrupt
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	EXTI_InitTypeDef EXTI_PB;
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
	EXTI_PB.EXTI_Line = EXTI_Line0;
	EXTI_PB.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_PB.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_PB.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_PB);
}

void init_NVIC_settings(void)
{
	NVIC_InitTypeDef NVIC_PB;
}

void Delay(uint32_t nCount)
{
	while (nCount > 0)
	{
		nCount--;
	}
}
